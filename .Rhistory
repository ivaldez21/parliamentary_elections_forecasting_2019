my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix = my_vector
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
quit()
my_vector = rnorm(1000)
rnorm
my_vector
sum(my_vector)/length(my_vector)
sum(my_vector)
length(my_vector)
my_vector2 = rnorm(100000)
sum(my_vector2)/length(my_vector2)
my_vector3 = rnorm(30)
sum(my_vector3)/length(my_vector3)
?combine
swirl()
library(swirl)
swirl()
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) = cnames
colnames(my_data) <- cnames
my_data
1:10
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5, 10, length = 30)
my_seq <- seq(5,10, length= 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
TRUE == TRUE
(FALSE==TRUE) == TRUE
(FALSE==TRUE) == FALSE
6 == 7
6 > 7
6 < 7
10 <= 10
5 != 7
!(5 !=7)
!(5==7)
False & False
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_functoin
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num=5)
remainder(4, div = 2)
args(remainder)
submit()
?standarddev
?sd
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Good morning, baby")
submit()
mad_libs('Washington DC',)
mad_libs('Washington DC','freshman','pollution')
submit()
submit()
submit()
submit()
I %p% love %p% R!
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list,character)
sapply(flags, )
sapply(flags, character)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags [, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat = sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem( elem[2])))
lapply(unique_vals, function(elem) elem[2])
swirl()
quit()
exit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_ves)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique((c(3,4,5,5,5,6,6)))
unique((c(3, 4, 5, 5, 5, 6, 6)))
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
exit()
play()
clear
clear()
clear worksapce
clear workspace
?rm
rm(list=ls())
gc()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
install.packages('installr')
install.packages('keras')
install.packages("keras")
update.packages(ask = F)
sessionInfo()
install.packages('magrittr')
install.packages("magrittr")
install.packages("tm")
install.packages('ggplot2')
install.packages('dplyr')
install.packages('tidytext')
install.packages('tidyverse')
install.packages('tensorflow')
library(tensorflow)
install_tensorflow()
View(flags)
install.packages('keras')
library(keras)
install_keras()
library(keras)
reticulate::conda_list()
reticulate::py_config()
reticulate::conda_list()
reticulate::py_config()
reticulate::py_config()
reticulate::use_python(/Library/Frameworks/Python.framework/Versions/3.7/Python)
reticulate::use_python(\Library\Frameworks\Python.framework\Versions\3.7\Python)
reticulate::use_python("/Library/Frameworks/Python.framework/Versions/3.7/Python"")
reticulate::use_python("/Library/Frameworks/Python.framework/Versions/3.7/Python")
reticulate::py_config()
reticulate::use_python("/Library/Frameworks/Python.framework/Versions/3.7/Python/bin/python3.7")
reticulate::py_config()
reticulate::py_available()
reticulate::py_config()
9+1+0+1+9+8+6
9+1+0+1+9+8+6
load("/Users/isaiahlawrencevaldez/Desktop/Data_Analysis_prep/MOCK_exam_data.RData")
#1. 9+1+0+1+9+8+6 = 34
print(9+1+0+1+9+8+6)
#1. 9+1+0+1+9+8+6 = 34
birthday_num = 9+1+0+1+9+8+6
View(HPRICE)
tableHPRICE)
table(HPRICE)
#2.
data <- HPRICE(c(34,34+50))
#2.
data <- HPRICE(-c(34,34+50),)
#2.
data <- HPRICE[-c(34,34+50),]
#2.
summary(HPRICE)
#2.
summary(HPRICE$price)
#2.
nrow(HPRICE$price)
#2.
nrows(HPRICE$price)
#2.
length(HPRICE$price)
# or
nrow(HPRICE)
mean(HPRICE$price)
#2.
length(data$price)
data <- HPRICE[-c(34:34+50),]
#2.
length(data$price)
data <- HPRICE[-c(34:(34+50),]
data <- HPRICE[-c(34:(34+50)),]
data <- HPRICE[-c(34:(34+49)),]
#2.
length(data$price)
# or
nrow(data)
summary(data$price)
mean(data$price)
sd(data$price)
#3. MLRM
MLMR <- lm(price~., data=data)
summary(MLMR)
#4. RMSE
res <- predict(MLMR, data=data)
#4. RMSE
MLRM.pred <- predict(MLMR, data=data)
rm(res)
res <- MLRM - MLRM.pred
res <- MLMR - MLMR.pred
#4. RMSE
MLMR.pred <- predict(MLMR, data=data)
res <- MLMR - MLMR.pred
res <- MLMR.pred - data$price
#4. RMSE
MLMR.pred <- predict(MLMR, data=data)
res <- MLMR.pred - data$price
RMSE <- sqrt(mean(res^2))
RMSE
loadmanylibs<-c('readr','corrplot','glmnet','caret','Amelia','data.table', 'testthat', 'gridExtra', 'GGally', 'ggplot2', 'e1071','RWeka', 'dplyr','mice','RWeka','rpart','ipred','gbm','randomForest','h2o')
lapply(loadmanylibs, require, character.only = TRUE)
#5. Build a regression tree
regtree <- rpart(price~., data=data)
plot(regtree, uniform = tree)
plot(regtree, uniform = TRUE)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
plot(regtree, uniform = TRUE, margin = 0.1)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
plot(regtree, uniform = TRUE, margin = 0.01)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
plot(regtree, uniform = TRUE, margin = 0.005)
plot(regtree, uniform = TRUE, margin = 0.005)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
plot(regtree, uniform = TRUE, margin = 0.1)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
plot(regtree, uniform = TRUE, margin = 0.2)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
#6. RMSE for tree regression
regtree <- predict(price~., data=data)
#6. RMSE for tree regression
regtree <- predict(regtree, data=data)
#5. Build a regression tree
regtree <- rpart(price~., data=data)
plot(regtree, uniform = TRUE, margin = 0.2)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
#6. RMSE for tree regression
regtree <- predict(regtree, data=data)
#5. Build a regression tree
regtree <- rpart(price~., data=data)
plot(regtree, uniform = TRUE, margin = 0.2)
text(regtree, use.n = FALSE, all = TRUE, cex = .8) #add text to tree
#6. RMSE for tree regression
regtree.pred <- predict(regtree, data=data)
MLRM.res <- MLMR.pred - data$price # get residuals
RMSE <- sqrt(mean(MLRM.res^2)) # RMSE
regtree.res <- regtree.pred - data$price
MLRM.RMSE <- sqrt(mean(MLRM.res^2)) # RMSE
regtree.RMSE <- sqrt(mean(regtree.res^2))
regtree.RMSE
# additional on lecture1
install.packages('quantmod')
library(quantmod)
getSymbols('CCEL')
dim(CCEL)
View(CCEL)
head(CCEL)
tail(CCEL)
head(CCEL, 10)
tail(CCEL, 10)
getSymbols('CCEL', from='2000-01-01', to='2019-02-23')
View(CCEL)
View(CCEL)
chartSeries(CCEL$CCEL.Adjusted, theme = 'green')
chartSeries(CCEL$CCEL.Adjusted, theme = 'white')
chartSeries(CCEL, theme = 'white')
chartSeries(CCEL$CCEL.Adjusted, theme = 'white') # plot with volume on it
chartSeries(CCEL, theme = 'white', TA=NULL)
library(rvest)
library(xml)
##### PACKAGES #######################
library(readr)
library(rvest)
library(data.table)
library(magrittr)
library(dplyr)
library(stringr)
Sys.setlocale(locale = "UTF-8")
setwd(dir = "/Users/isaiahlawrencevaldez/Documents/GitHub/parliamentary_elections_forecasting_2019/isaiah")
get_results = function() {
base_url = "https://www.cvk.gov.ua/pls/vnd2019/wp306_npt001f01=919.html"
base_prefix = "https://www.cvk.gov.ua/pls/vnd2019/"
page = read_html(base_url)
tvo_rel_urls = page %>% html_nodes('table tbody tr td a.a1') %>% html_attr("href")
tvo_urls = paste(base_prefix, tvo_rel_urls, sep = "")
get_tvo_results = function(tvo_url) {
start_time = Sys.time() #timer to have 2 seconds or more per request
base_prefix = "https://www.cvk.gov.ua/pls/vnd2019/"
page = read_html(tvo_url)
tvo_name = page %>% html_node("h1") %>% html_text %>%
str_extract(pattern = "\\d+") # %>% as.numeric (if needed), default as string
percent_counted = page %>% html_node("tr + tr .b") %>% html_text %>% trimws()
tvo_table = page %>% html_node("div main div table") %>% html_table()
tvo_table[['tvo']] = tvo_name
candidate_rel_url = page %>% html_nodes("table a.a2") %>% html_attr("href")
tvo_table[['candidate_url']] = paste(base_prefix, candidate_rel_url, sep = "")
tvo_table[['percent_counted']] = percent_counted
tvo_table %<>% mutate_all(as.character)
end_time = Sys.time() #timer to have 2 seconds or more per request
time_left = 1 - (end_time - start_time)
if (time_left > 0) {
Sys.sleep(time_left) #sleeps if less than 2 seconds past
}
print(tvo_name) # verbose to know where the loop is
tvo_table
}
frames_list = lapply(tvo_urls, get_tvo_results)
frames_list
}
result_raw_list = get_results()
result_raw_list = get_results()
results_raw = bind_rows(result_raw_list)
names(results_raw) = c("candidate", "graph", "perc_for",
"votes_for", "tvo", "candidate_url", "percent_counted")
##### Use candidate urls to get more info about them
get_candidate_info = function(candidate_url) {
url = candidate_url
start_time = Sys.time() #timer to have 2 seconds or more per request
page = read_html(url)
winner_table_rows = page %>% html_node('table') %>% html_nodes('tr')
winner_table_tds = lapply(winner_table_rows, function(row) {
row %>% html_nodes('td') %>% html_text
})
column_one = winner_table_tds %>% sapply(extract2, 1)
column_two = winner_table_tds %>% sapply(extract2, 2)
candidate = page %>% html_node('h1') %>% html_text()
temp_df = data.frame(column_one, column_two, stringsAsFactors = F) %>%
t() %>% data.frame(stringsAsFactors = F)
colnames(temp_df) = temp_df[1,]
temp_df = temp_df[-1,]
rownames(temp_df) <- NULL
temp_df[['candidate']] = candidate
end_time = Sys.time() #timer to have 2 seconds or more per request
time_left = 1 - (end_time - start_time)
if (time_left > 0) {
Sys.sleep(time_left) #sleeps if less than 2 seconds past
}
print(url)
temp_df
}
##### Clean the raw extracted data #####################
results = results_raw #keeping a copy
sapply(results, mode)
head(results, 1)
results[['graph']] <- NULL
#fix the comma/deciml/space problem in numeric columns
for (col in c("perc_for", "votes_for", "percent_counted")) {
results[[col]] %<>%
gsub(pattern = ",", replacement = ".") %>%
gsub(pattern = "\\s", replacement = "") %>%
as.numeric()
}
sapply(results, class)
#split the candidate column into candidate and proposed party
results[["proposed"]] = results[["candidate"]] %>%
strsplit(split = ",") %>% sapply(FUN = `[[`, 2) %>% trimws()
results[["candidate"]] %<>%
strsplit(split = ",") %>% sapply(FUN = `[[`, 1) %>% trimws()
# results %<>% mutate_if(is.character,as.factor)
sapply(results, class)
#shorten the party names for graphs
for (i in 1:nrow(results)) {
results$proposed[i] = switch(results$proposed[i],
'ПОЛІТИЧНА ПАРТІЯ "СЛУГА НАРОДУ"' = "Слуга Народу",
"самовисування" = "самовисування",
'Політична партія "ОПОЗИЦІЙНА ПЛАТФОРМА – ЗА ЖИТТЯ"' = "Опозиційна платформа",
'Політична партія "ОПОЗИЦІЙНИЙ БЛОК"' = "Опозиційний блок",
'політична партія Всеукраїнське об’єднання "Батьківщина"' = "Батьківщина",
'Політична Партія "ГОЛОС"' = 'Голос',
'Політична партія "Європейська Солідарність"' = "Європейська Солідарність",
"Other")
results$candidate[i] = gsub(pattern = "[[:punct:]]", replacement = "", x = results$candidate[i])
}
#group by tvo and take only the top one people
winners_df = results %>% group_by(tvo) %>% top_n(n = 2, wt = perc_for) %>%
mutate(spread = perc_for - min(perc_for)) %>% top_n(n = 1, wt = perc_for)
predicted_table = table(winners_df$proposed)
hist(winners_df$percent_counted, breaks = bins)
bins = seq(0,100,2)
hist(winners_df$percent_counted, breaks = bins)
# see how much the percents have updated since last run
if (exists("last_percents")) {
difference = winners_df$percent_counted - last_percents
}
# last_percents = winners_df$percent_counted
hist(winners_df$percent_counted[which(winners_df$proposed == "Слуга Народу")], breaks = bins)
hist(winners_df$spread, breaks = bins)
# last_percents = winners_df$percent_counted
hist(winners_df$percent_counted[which(winners_df$proposed == "Слуга Народу")], breaks = bins)
# Plot for winner per party
# Fitting Labels
par(las=2) # make label text perpendicular to axis
par(mar=c(5,12,4,2)) # increase y-axis margin.
winners_df$proposed %<>% as.factor
counts = sort(table(winners_df$proposed))
counts
barplot(counts, main="Distribution of Winners", horiz=TRUE)
par(mar=c(2,2,2,2)) # increase y-axis margin.
parties_df = winners_df %>% group_by(proposed) %>%
summarise(winners = n(),
spread = mean(spread),
percent_counted = mean(percent_counted))
# compare winners to predictions
predictions_df = read_csv("predictions.csv")
predictions_df_top = read_csv("top_2_per_tvo.csv")
# keep only top 1 per tvo
predictions_df_top %<>% group_by(tvo) %>% top_n(1, wt = likelihood)
comparison_df = data.frame(
predicted = predictions_df_top$deputat,
atual = winners_df$candidate,
tvo = winners_df$tvo,
party = winners_df$proposed,
spread = winners_df$spread,
stringsAsFactors = F)
correct = comparison_df$predicted == comparison_df$atual
table(correct)
88/
(88+111)
